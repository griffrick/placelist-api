from django.contrib.auth import get_user_modelfrom django.forms.models import model_to_dictfrom rest_framework import statusfrom rest_framework.response import Responsefrom rest_framework.views import APIViewfrom api.models import Placelist as PlacelistModel, Place as PlaceModel, Userfrom api.serializers import PlacelistSerializer, PlacelistSerializerGet, PlaceSerializer, UserSerializer# Testing 1class Place(APIView):    def get_many_places(self):        places = PlaceModel.objects.all().order_by('-name')        serializer = PlaceSerializer(places, many=True)        return Response(serializer.data)    def get_single_place(self, place_key):        single_place = PlaceModel.objects.get(id=place_key)        serializer = PlaceSerializer(single_place)        return Response(serializer.data)    def get(self, request, place_key='0'):        print "place key is " + place_key        if (place_key is '0'):            return self.get_many_places()        else:            return self.get_single_place(place_key)    def post(self, request):        print(request.data)        serializer = PlaceSerializer(data=request.data)        if serializer.is_valid():            serializer.save()            return Response(serializer.data, status=status.HTTP_201_CREATED)        else:            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)            #################### END POST RELATED METHODS ####################class PlacelistView(APIView):    def get_many_lists(self, request):        lists = PlacelistModel.objects.all().order_by('-updated_on')        serializer = PlacelistSerializerGet(lists, many=True, context={'request': request})        return Response(serializer.data)    def get_one_list(self, list_key, request):        num_list = PlacelistModel.objects.get(id=list_key)        serializer = PlacelistSerializerGet(num_list, context={'request': request})        return Response(serializer.data)    def get(self, request, list_key='0'):        print "list key is " + list_key        if (list_key is '0'):            return self.get_many_lists(request)        else:            return self.get_one_list(list_key, request)    def add_place_to_list(self, request, list_key):        num_list = PlacelistModel.objects.get(id=list_key)        existing_places_len = len(            PlaceModel.objects.filter(name=request.data['name'], street_address=request.data['street_address']))        if existing_places_len == 0:            serializer = PlaceSerializer(data=request.data)            if serializer.is_valid():                serializer.save()            else:                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)        new_place = PlaceModel.objects.get(name=request.data['name'])        num_list.places.add(new_place)        new_place_dict = model_to_dict(new_place)        serializer = PlaceSerializer(data=new_place_dict)        if serializer.is_valid():            return Response(serializer.data, status=status.HTTP_201_CREATED)        else:            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)    def create_new_list(self, request):        print(request.data)        ar_data = {}        cuser = User.objects.get(username=request.data['author'])        ar_data['author'] = cuser.id        ar_data['list_type'] = request.data['list_type']        ar_data['title'] = request.data['title']        print(ar_data)        # serializer = PlacelistSerializer(data = ar_data)        serializer = PlacelistSerializer(data=ar_data)        print(serializer)        if serializer.is_valid():            serializer.save()            return Response(serializer.data, status=status.HTTP_201_CREATED)        else:            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)    def post(self, request, list_key='0'):        print(list_key)        if (list_key is '0'):            return self.create_new_list(request)        else:            return self.add_place_to_list(request, list_key)class Register(APIView):    def post(self, request):        VALID_USER_FIELDS = [f.name for f in get_user_model()._meta.fields]        DEFAULTS = {            # you can define any defaults that you would like for the user, here        }        serialized = UserSerializer(data=request.data)        if serialized.is_valid():            user_data = {field: data for (field, data) in request.data.items() if field in VALID_USER_FIELDS}            user_data.update(DEFAULTS)            user = get_user_model().objects.create_user(                **user_data            )            return Response(UserSerializer(instance=user).data, status=status.HTTP_201_CREATED)        else:            return Response(serialized._errors, status=status.HTTP_400_BAD_REQUEST)